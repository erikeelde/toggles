apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.oss.licenses.plugin'

androidExtensions {
    experimental = true
}

kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dataBinding {
        enabled = true
    }

    compileSdkVersion Versions.compileSdk
    defaultConfig {
        applicationId "com.izettle.wrench"
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.appVersionCode
        versionName Versions.appVersionName

        testInstrumentationRunner "androidx.test.ext.junit.runners.AndroidJUnit4"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        def configurationAuthorityValue = applicationId + ".configprovider"
        def wrenchPermission = applicationId + ".permission"

        manifestPlaceholders = [configurationAuthority: configurationAuthorityValue, wrenchPermission: wrenchPermission]

        buildConfigField "String", "CONFIG_AUTHORITY", "\"${configurationAuthorityValue}\""

    }
    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
        exclude 'mockito-extensions/org.mockito.plugins.MockMaker'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-stetho.pro'
        }
        debug {
            versionNameSuffix " debug"
            applicationIdSuffix = ".debug"
        }
    }
    lintOptions {
        baseline file("lint-baseline.xml")
        checkReleaseBuilds true
        abortOnError true
        warningsAsErrors true
        lintConfig file("../lint.xml")
    }
    sourceSets {
        // debug.assets.srcDirs => https://github.com/robolectric/robolectric/issues/3928
        debug.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    testImplementation Libs.junit
    testImplementation Libs.mockito.core

    testImplementation Libs.androidTestingSupportLibrary.core
    testImplementation Libs.androidTestingSupportLibrary.truth
    testImplementation Libs.androidTestingSupportLibrary.rules
    testImplementation Libs.androidTestingSupportLibrary.runner
    testImplementation Libs.androidTestingSupportLibrary.junit

    testImplementation Libs.mockito.android
    testImplementation Libs.wrench.prefs
    testImplementation Libs.room.testing
    testImplementation Libs.koin.koinTest
    testImplementation Libs.robolectric

    kapt Libs.lifecycle.compiler
    kapt Libs.room.compiler

    implementation Libs.support.app_compat
    implementation Libs.support.recyclerview
    implementation Libs.support.design
    implementation (Libs.stetho) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    implementation Libs.constraint_layout
    implementation Libs.support.cardview
    implementation Libs.lifecycle.extensions
    implementation Libs.room.runtime
    implementation Libs.paging

    implementation Libs.navigation.fragmentKotlin
    implementation Libs.navigation.uiKotlin

    implementation Libs.wrench.core
    implementation Libs.wrench.prefs
    implementation Libs.kotlin.stdlib
    implementation Libs.kotlin.coroutinesAndroid

    implementation Libs.koin.androidx

}
